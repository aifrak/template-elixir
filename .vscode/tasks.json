{
  "version": "2.0.0",
  "tasks": [
    /* ———————————————————————————————————————————— */
    /*                  Application                 */
    /* ———————————————————————————————————————————— */
    {
      "label": "format",
      "type": "shell",
      "command": "./run",
      "args": ["format"],
      "problemMatcher": [],
      "detail": "Format code of the whole project"
    },
    {
      "label": "install:deps",
      "type": "shell",
      "command": "./run",
      "args": ["install:deps"],
      "problemMatcher": [],
      "detail": "Install all dependencies"
    },
    {
      "label": "lint",
      "type": "shell",
      "command": "./run",
      "args": ["lint"],
      "problemMatcher": [],
      "detail": "Lint the whole project"
    },
    {
      "label": "lint:staged",
      "type": "shell",
      "command": "./run",
      "args": ["lint:staged"],
      "problemMatcher": [],
      "detail": "Lint staged files"
    },
    {
      "label": "pre-commit",
      "type": "shell",
      "command": "./run",
      "args": ["pre-commit"],
      "problemMatcher": [],
      "detail": "Lint staged files and test the whole project"
    },
    {
      "label": "test",
      "type": "shell",
      "command": "./run",
      "args": ["test"],
      "problemMatcher": [],
      "detail": "Test and lint the whole project"
    },
    /* ———————————————————————————————————————————— */
    /*                docker compose                */
    /* ———————————————————————————————————————————— */
    {
      "label": "dc:build",
      "type": "shell",
      "command": "./run ${input:dcOpts} dc:build",
      "problemMatcher": [],
      "detail": "Build all docker services"
    },
    {
      "label": "dc:console",
      "type": "shell",
      "command": "./run ${input:dcOpts} dc:console",
      "problemMatcher": [],
      "detail": "Build, start, up all services and console of 'app' docker service"
    },
    {
      "label": "dc:exec",
      "type": "shell",
      "command": "./run ${input:dcOpts} dc:exec ${input:cmd}",
      "problemMatcher": [],
      "detail": "Execute a command in a 'app' docker service"
    },
    {
      "label": "dc:run",
      "type": "shell",
      "command": "./run ${input:dcOpts} dc:run ${input:cmd}",
      "problemMatcher": [],
      "detail": "Run a command inside the 'app' docker service and remove stopped containers"
    },
    {
      "label": "dc:up",
      "type": "shell",
      "command": "./run ${input:dcOpts} dc:up",
      "problemMatcher": [],
      "detail": "Starts all docker services"
    },
    /* ———————————————————————————————————————————— */
    /*                    Elixir                    */
    /* ———————————————————————————————————————————— */
    {
      "label": "format:elixir",
      "type": "shell",
      "command": "./run",
      "args": ["format:elixir"],
      "problemMatcher": [],
      "detail": "Format Elixir files"
    },
    {
      "label": "lint:elixir",
      "type": "shell",
      "command": "./run",
      "args": ["lint:elixir"],
      "problemMatcher": [],
      "detail": "Lint Elixir files"
    },
    /* ———————————————————————————————————————————— */
    /*                     Shell                    */
    /* ———————————————————————————————————————————— */
    {
      "label": "format:shell",
      "type": "shell",
      "command": "./run",
      "args": ["format:shell"],
      "problemMatcher": [],
      "detail": "Format Shell scripts"
    },
    {
      "label": "lint:shell",
      "type": "shell",
      "command": "./run",
      "args": ["lint:shell"],
      "problemMatcher": [],
      "detail": "Lint Shell scripts"
    },
    /* ———————————————————————————————————————————— */
    /*                  Dockerfile                  */
    /* ———————————————————————————————————————————— */
    {
      "label": "format:dockerfile",
      "type": "shell",
      "command": "./run",
      "args": ["format:dockerfile"],
      "problemMatcher": [],
      "detail": "Format all Dockerfiles"
    },
    {
      "label": "lint:dockerfile",
      "type": "shell",
      "command": "./run",
      "args": ["lint:dockerfile"],
      "problemMatcher": [],
      "detail": "Lint all Dockerfiles"
    },
    /* ———————————————————————————————————————————— */
    /*                      Git                     */
    /* ———————————————————————————————————————————— */
    {
      "label": "lint:git:commit",
      "type": "shell",
      "command": "./run",
      "args": ["lint:git:commit"],
      "problemMatcher": [],
      "detail": "Lint git commit message"
    },
    /* ———————————————————————————————————————————— */
    /*                   Markdown                   */
    /* ———————————————————————————————————————————— */
    {
      "label": "lint:markdown",
      "type": "shell",
      "command": "./run",
      "args": ["lint:markdown"],
      "problemMatcher": [],
      "detail": "Lint markdown files"
    },
    /* ———————————————————————————————————————————— */
    /*                   Prettier                   */
    /* ———————————————————————————————————————————— */
    {
      "label": "format:prettier",
      "type": "shell",
      "command": "./run",
      "args": ["format:prettier"],
      "problemMatcher": [],
      "detail": "Format files handled by Prettier"
    },
    {
      "label": "lint:prettier",
      "type": "shell",
      "command": "./run",
      "args": ["lint:prettier"],
      "problemMatcher": [],
      "detail": "Lint files handled by Prettier"
    },
    /* ———————————————————————————————————————————— */
    /*             CSS, SCSS, SASS, LESS            */
    /* ———————————————————————————————————————————— */
    {
      "label": "format:css",
      "type": "shell",
      "command": "./run",
      "args": ["format:css "],
      "problemMatcher": [],
      "detail": "Format CSS, SCSS, SASS, LESS and any files containing CSS"
    },
    {
      "label": "lint:css",
      "type": "shell",
      "command": "./run",
      "args": ["lint:css "],
      "problemMatcher": [],
      "detail": "Lint CSS, SCSS, SASS, LESS and any files containing CSS"
    },
    /* ———————————————————————————————————————————— */
    /*                     HTML                     */
    /* ———————————————————————————————————————————— */
    {
      "label": "lint:html",
      "type": "shell",
      "command": "./run",
      "args": ["lint:html"],
      "problemMatcher": [],
      "detail": "Lint HTML files and templates"
    },
    /* ———————————————————————————————————————————— */
    /*                  Javascript                  */
    /* ———————————————————————————————————————————— */
    {
      "label": "format:js",
      "type": "shell",
      "command": "./run",
      "args": ["format:js"],
      "problemMatcher": [],
      "detail": "Format JS files and any files containing Javascript"
    },
    {
      "label": "lint:js",
      "type": "shell",
      "command": "./run",
      "args": ["lint:js"],
      "problemMatcher": [],
      "detail": "Lint JS files and any files containing Javascript"
    }
  ],
  "inputs": [
    {
      "id": "cmd",
      "type": "promptString",
      "description": "Command? (e.g. ./run test)"
    },
    {
      "id": "dcOpts",
      "type": "promptString",
      "default": "--dc-dev",
      "description": "Options? (e.g. --dc-dev, --dc-ci)"
    }
  ]
}
