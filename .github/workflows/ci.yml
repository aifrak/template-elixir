name: CI

on: [push, workflow_dispatch]

jobs:
  ci:
    name: CI
    runs-on: ubuntu-20.04

    env:
      IMAGE_TARGET: ci
      IMAGE_TAG: aifrak/template-elixir:ci
      DOCKER_CACHE_OLD: /tmp/.buildx-cache
      DOCKER_CACHE_NEW: /tmp/.buildx-cache-new

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      # —————————————————————————————————————————————— #
      #                     Docker                     #
      # —————————————————————————————————————————————— #

      - name: Add environment variables used by Docker build
        run: |
          echo "USER_UID=$(id -u)" >> $GITHUB_ENV
          echo "USER_GID=$(id -g)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Cache Docker layers
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image and Docker cache
        uses: docker/build-push-action@v2.7.0
        with:
          load: true
          target: ${{ env.IMAGE_TARGET }}
          tags: ${{ env.IMAGE_TAG }}
          build-args: |
            USER_UID=${{ env.USER_UID }}
            USER_GID=${{ env.USER_GID }}
          cache-from: type=local,src=${{ env.DOCKER_CACHE_OLD }}
          cache-to: type=local,dest=${{ env.DOCKER_CACHE_NEW }}

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move Docker cache
        run: |
          rm -rf ${{ env.DOCKER_CACHE_OLD }}
          mv ${{ env.DOCKER_CACHE_NEW }} ${{ env.DOCKER_CACHE_OLD }}

      - name: Starts all docker services
        run: |
          ./run --dc-ci dc:up

      # —————————————————————————————————————————————— #
      #                      Cache                     #
      # —————————————————————————————————————————————— #

      - name: Get versions
        run: |
          echo "NODE_VERSION=$(./run --dc-ci dc:exec npm -v)" >> $GITHUB_ENV
          echo "ELIXIR_VERSION=$(./run --dc-ci dc:exec ./run elixir:version)" >> $GITHUB_ENV
          echo "ERLANG_VERSION=$(./run --dc-ci dc:exec ./run erlang:version)" >> $GITHUB_ENV

      - name: Cache Elixir deps
        id: elixir-deps-cache
        uses: actions/cache@v2.1.7
        with:
          path: |
            **/deps
          key: |
            ${{ runner.os }}-elixir-deps-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-elixir-deps-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}-

      - name: Cache Elixir build
        id: elixir-build-cache
        uses: actions/cache@v2.1.7
        with:
          path: |
            **/_build
            **/.sobelow
          key: |
            ${{ runner.os }}-elixir-build-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}-${{ hashFiles('**/mix.lock') }}-${{ hashFiles( '**/lib/**/*.{ex,eex}', '**/config/*.exs', '**/mix.exs' ) }}
          restore-keys: |
            ${{ runner.os }}-elixir-build-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}-${{ hashFiles('**/mix.lock') }}-
            ${{ runner.os }}-elixir-build-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}-

      - name: Cache Dialyzer PLTs
        id: dialyzer-plts-cache
        uses: actions/cache@v2.1.7
        with:
          path: |
            **/priv/plts
          key: |
            ${{ runner.os }}-dialyzer-plts-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}
          restore-keys: |
            ${{ runner.os }}-dialyzer-plts-${{ env.ELIXIR_VERSION }}-${{ env.ERLANG_VERSION }}

      - name: Cache node modules
        uses: actions/cache@v2.1.7
        id: node-modules-cache
        with:
          path: |
            **/node_modules
            **/npm_cache
            **/.cspellcache
            **/.eslintcache
            **/.stylelintcache
          key: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-

      # —————————————————————————————————————————————— #
      #                  Dependencies                  #
      # —————————————————————————————————————————————— #

      - name: Fetch and compile Elixir dependencies
        if: steps.elixir-deps-cache.outputs.cache-hit != 'true'
        run: |
          ./run --dc-ci dc:exec mix setup.ci

      - name: Install node modules
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: |
          ./run --dc-ci dc:exec mix npm.ci

      # —————————————————————————————————————————————— #
      #                   Application                  #
      # —————————————————————————————————————————————— #

      - name: Compile Elixir application and run all checks
        run: |
          ./run --dc-ci dc:exec mix check.ci

      - name: Lint latest git commit message
        if: >-
          github.actor != 'dependabot[bot]'
          && (
            github.event_name != 'pull_request'
            || (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]')
          )
        run: |
          ./run --dc-ci dc:exec ./run git:commit:lint-latest

      - name: Upload Code Coverage report
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cover/excoveralls.json
          fail_ci_if_error: true
