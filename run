#!/usr/bin/env bash

set -euo pipefail

current_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

. "${current_dir}/scripts/run/css.sh"
. "${current_dir}/scripts/run/docker_file.sh"
. "${current_dir}/scripts/run/elixir.sh"
. "${current_dir}/scripts/run/git.sh"
. "${current_dir}/scripts/run/html.sh"
. "${current_dir}/scripts/run/javascript.sh"
. "${current_dir}/scripts/run/markdown.sh"
. "${current_dir}/scripts/run/prettier.sh"
. "${current_dir}/scripts/run/release.sh"
. "${current_dir}/scripts/run/shell.sh"
. "${current_dir}/scripts/run/spellcheck.sh"
. "${current_dir}/scripts/lib/utils.sh"

export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

function help {
  cat <<EOF

$0 [command] [OPTIONS] [sub-command]

Example: $0 --dc-dev dc:exec ./run test

Options:
  -h, --help                  Print this message
  --dc-ci                     Use "ci" file when docker compose
  --dc-dev                    Use "dev" file when docker compose

Main commands:
  help                        Print this message
  format                      Format code of the whole project
  install-deps                Install all dependencies
  lint                        Lint the whole project
  lint-staged                 Lint staged files
  pre-commit                  Lint staged files and test the whole project
  test                        Test the whole project

docker compose commands:
  dc:build                    Build all docker services
  dc:console                  Build, start, up all services and console of "app" docker service
  dc:exec                     Execute a command in a "app" docker service
  dc:run                      Run a command inside the "app" docker service and remove stopped containers
  dc:up                       Starts all docker services
EOF

  release:help
  elixir:help
  css:help
  html:help
  js:help
  markdown:help
  prettier:help
  shell:help
  dockerfile:help
  spellcheck:help
  git:help
}

# —————————————————————————————————————————————— #
#                Helper functions                #
# —————————————————————————————————————————————— #

# Check if the command is from the docker container or the host.
function is_inside_docker {
  [[ "${INSIDE_DOCKER:-false}" == true ]]
}

function is_ci {
  [[ "${CI:-false}" == true ]]
}

# If we're running in CI we need to disable TTY allocation for docker-compose
# commands that enable it by default, such as exec and run.
# Idea from: https://github.com/nickjj/docker-flask-example/blob/main/run
TTY=""
if [[ ! -t 1 ]] || is_ci; then
  TTY="-T"
fi

# —————————————————————————————————————————————— #
#                   Application                  #
# —————————————————————————————————————————————— #

function test {
  if is_inside_docker; then
    mix check \
      --only ex_unit \
      --only release_test
  else
    dc:exec ./run test
  fi
}

function lint {
  # shellcheck disable=SC2119
  if is_inside_docker; then
    mix check \
      --except ex_unit \
      --except lint_staged \
      --except release_test
  else
    dc:exec ./run lint
  fi
}

function format {
  # shellcheck disable=SC2119
  if is_inside_docker; then
    mix format.all
  else
    dc:exec ./run format
  fi
}

function pre-commit {
  if is_inside_docker; then
    mix check \
      --only ex_unit \
      --only lint_staged
  else
    dc:exec ./run pre-commit
  fi
}

function lint-staged {
  npx lint-staged
}

function install-deps {
  if is_inside_docker; then
    mix setup.deps.dev
  else
    dc:exec ./run install-deps
  fi
}

# —————————————————————————————————————————————— #
#                 docker compose                 #
# —————————————————————————————————————————————— #

dc_options=()

ci_dc_options=(
  -f docker-compose.yml
  -f docker-compose.ci.yml
)

dev_dc_options=(
  -f docker-compose.yml
  -f docker-compose.dev.yml
)

function dc {
  docker compose "${dc_options[@]}" "${@}"
}

function dc:build {
  docker buildx bake "${dc_options[@]}"
}

function dc:exec {
  dc exec ${TTY} app "${@}"
}

function dc:run {
  dc run ${TTY} app "${@}"
  dc rm -f -v
}

function dc:up {
  dc up -d --remove-orphans
}

function dc:console {
  dc:build
  dc:up
  dc:exec bash
}

# —————————————————————————————————————————————— #
#                       run                      #
# —————————————————————————————————————————————— #

opt_dc_ci=
opt_dc_dev=

for opt in "${@}"; do
  case ${opt} in
    --dc-ci)
      if [[ -n ${opt_dc_dev} ]]; then
        alert_die "--dc-ci is not compatible with --dc-dev"
      fi

      dc_options=("${ci_dc_options[@]}")
      opt_dc_ci=1

      shift
      ;;
    --dc-dev)
      if [[ -n ${opt_dc_ci} ]]; then
        alert_die "--dc-dev is not compatible with --dc-ci"
      fi

      dc_options=("${dev_dc_options[@]}")
      opt_dc_dev=1

      shift
      ;;
    -h | --help)
      help
      close
      ;;
  esac
done

# Idea from: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
