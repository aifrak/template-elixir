#!/usr/bin/env bash

set -euo pipefail

. ./scripts/run/docker-file.sh
. ./scripts/run/elixir.sh
. ./scripts/run/shell.sh
. ./scripts/lib/utils.sh

# If we're running in CI we need to disable TTY allocation for docker-compose
# commands that enable it by default, such as exec and run.
# Idea from: https://github.com/nickjj/docker-flask-example/blob/main/run
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1

function help {
  cat <<EOF

$0 [command] [options...]

Main commands:
  format                     Format code of the whole project
  lint                       Lint the whole project
  pre-commit                 Format, lint and test the whole project
  test                       Test the whole project

docker-compose commands:
  dc:build                   Build all docker services
  dc:run                     Run a command inside the "app" docker service and remove stopped containers

Dev commands:
  dev:code                   Prepare docker services for development environment
  dev:dc                     Run docker-compose with development configuration
  dev:build                  Build docker service with development configuration
EOF

  elixir:help
  shell:help
  dockerfile:help
}

# ---------------------------------------------- #
#                Helper functions                #
# ---------------------------------------------- #

# Check if the command is from the docker container or the host.
# INSIDE_DOCKER=1 is set from the Dockerfile
function is_inside_docker {
  if [[ ${INSIDE_DOCKER:-0} -eq 1 ]]; then
    return 0
  else
    return 1
  fi
}

# ---------------------------------------------- #
#                      Main                      #
# ---------------------------------------------- #

function test {
  if is_inside_docker; then
    elixir:test
  else
    dc:run ./run test
  fi
}

function lint {
  if is_inside_docker; then
    local status=0

    elixir:lint || status=${?}
    elixir:eex:lint || status=${?}
    shell:lint || status=${?}
    dockerfile:lint || status=${?}
    npx markdownlint . || status=${?}
    npx prettier --check . || status=${?}

    if [[ ${status} -eq 0 ]]; then
      success "✔ Project linted"
    else
      alert "✖ Project linted: issue(s) found"
      exit ${status}
    fi
  else
    dc:run ./run lint
  fi
}

function format {
  if is_inside_docker; then
    elixir:format
    elixir:eex:format
    shell:format
    dockerfile:format
    npx prettier --list-different --write .

    success "✔ Project formatted"
  else
    dc:run ./run format
  fi
}

function pre-commit {
  if is_inside_docker; then
    format
    lint
    test
  else
    dc:run ./run pre-commit
  fi
}

# ---------------------------------------------- #
#                 docker-compose                 #
# ---------------------------------------------- #

function dc:build {
  docker buildx bake
}

function dc:run {
  docker-compose run ${TTY} app "${@}"
  docker-compose rm -f -v
}

# ---------------------------------------------- #
#                       Dev                      #
# ---------------------------------------------- #

dev_dc_options=(
  -f docker-compose.yml
  -f docker-compose.dev.yml
)

function dev:code {
  dev:build
  dev:dc up -d --remove-orphans
  dev:dc exec app bash
}

function dev:dc {
  docker-compose "${dev_dc_options[@]}" "${@}"
}

function dev:build {
  docker buildx bake "${dev_dc_options[@]}"
}

# Idea from: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
